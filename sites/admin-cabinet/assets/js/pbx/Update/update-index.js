"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2020 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

/* global PbxApi, globalPBXVersion, globalTranslate,
globalWebAdminLanguage, globalPBXVersion, showdown, UserMessage */
var mergingCheckWorker = {
  timeOut: 3000,
  timeOutHandle: '',
  errorCounts: 0,
  $progressBarLabel: $('#upload-progress-bar').find('.label'),
  fileID: null,
  filePath: '',
  initialize: function initialize(fileID, filePath) {
    mergingCheckWorker.fileID = fileID;
    mergingCheckWorker.filePath = filePath;
    mergingCheckWorker.restartWorker(fileID);
  },
  restartWorker: function restartWorker() {
    window.clearTimeout(mergingCheckWorker.timeoutHandle);
    mergingCheckWorker.worker();
  },
  worker: function worker() {
    PbxApi.FilesGetStatusUploadFile(mergingCheckWorker.fileID, mergingCheckWorker.cbAfterResponse);
    mergingCheckWorker.timeoutHandle = window.setTimeout(mergingCheckWorker.worker, mergingCheckWorker.timeOut);
  },
  cbAfterResponse: function cbAfterResponse(response) {
    if (mergingCheckWorker.errorCounts > 10) {
      mergingCheckWorker.$progressBarLabel.text(globalTranslate.upd_UploadError);
      UserMessage.showMultiString(globalTranslate.upd_UploadError);
      updatePBX.$submitButton.removeClass('loading');
      window.clearTimeout(mergingCheckWorker.timeoutHandle);
    }

    if (response === undefined || Object.keys(response).length === 0) {
      mergingCheckWorker.errorCounts += 1;
      return;
    }

    if (response.d_status === 'UPLOAD_COMPLETE') {
      mergingCheckWorker.$progressBarLabel.text(globalTranslate.upd_UpgradeInProgress);
      PbxApi.SystemUpgrade(mergingCheckWorker.filePath, updatePBX.cbAfterStartUpdate);
      window.clearTimeout(mergingCheckWorker.timeoutHandle);
    } else if (response.d_status !== undefined) {
      mergingCheckWorker.$progressBarLabel.text(globalTranslate.upd_UploadInProgress);
      mergingCheckWorker.errorCounts = 0;
    } else {
      mergingCheckWorker.errorCounts += 1;
    }
  }
};
var upgradeStatusLoopWorker = {
  timeOut: 1000,
  timeOutHandle: '',
  iterations: 0,
  filename: '',
  initialize: function initialize(filename) {
    upgradeStatusLoopWorker.filename = filename;
    upgradeStatusLoopWorker.iterations = 0;
    upgradeStatusLoopWorker.restartWorker();
  },
  restartWorker: function restartWorker() {
    window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
    upgradeStatusLoopWorker.worker();
  },
  worker: function worker() {
    window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
    PbxApi.FilesFirmwareDownloadStatus(upgradeStatusLoopWorker.filename, upgradeStatusLoopWorker.cbRefreshUpgradeStatus);
  },
  cbRefreshUpgradeStatus: function cbRefreshUpgradeStatus(response) {
    upgradeStatusLoopWorker.iterations += 1;
    upgradeStatusLoopWorker.timeoutHandle = window.setTimeout(upgradeStatusLoopWorker.worker, upgradeStatusLoopWorker.timeOut);
    if (response.length === 0 || response === false) return;

    if (response.d_status === 'DOWNLOAD_IN_PROGRESS') {
      $('i.loading.redo').closest('a').find('.percent').text("".concat(response.d_status_progress, "%"));
    } else if (response.d_status === 'DOWNLOAD_COMPLETE') {
      window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
      $('i.loading.redo').closest('a').find('.percent').text("".concat(response.d_status_progress, "%"));
      $('i.loading.redo').addClass('sync').removeClass('redo');
      PbxApi.SystemUpgrade(response.filePath, updatePBX.cbAfterStartUpdate);
    } else if (response.d_status === 'DOWNLOAD_ERROR') {
      window.clearTimeout(upgradeStatusLoopWorker.timeoutHandle);
      UserMessage.showMultiString(globalTranslate.upd_DownloadUpgradeError);
      $('i.loading.redo').addClass('redo').removeClass('loading');
    }
  }
};
var updatePBX = {
  $formObj: $('#upgrade-form'),
  $submitButton: $('#submitbutton'),
  $progressBar: $('#upload-progress-bar'),
  $progressBarLabel: $('#upload-progress-bar').find('.label'),
  currentVersion: globalPBXVersion,
  $restoreModalForm: $('#update-modal-form'),
  upgradeInProgress: false,
  converter: new showdown.Converter(),
  initialize: function initialize() {
    updatePBX.$restoreModalForm.modal();
    updatePBX.$submitButton.addClass('disabled');
    $('input:text, .ui.button', '.ui.action.input').on('click', function (e) {
      $('input:file', $(e.target).parents()).click();
    });
    $('input:file', '.ui.action.input').on('change', function (e) {
      if (e.target.files[0] !== undefined) {
        var filename = e.target.files[0].name;
        $('input:text', $(e.target).parent()).val(filename);
        updatePBX.$submitButton.removeClass('disabled');
      }
    });
    updatePBX.$submitButton.on('click', function (e) {
      e.preventDefault();
      if (updatePBX.$submitButton.hasClass('loading') || updatePBX.upgradeInProgress) return;
      updatePBX.$formObj.form({
        on: 'blur',
        fields: updatePBX.validateRules,
        onSuccess: function onSuccess() {
          updatePBX.$restoreModalForm.modal({
            closable: false,
            onDeny: function onDeny() {
              return true;
            },
            onApprove: function onApprove() {
              updatePBX.$submitButton.addClass('loading');
              updatePBX.upgradeInProgress = true;
              var data = $('input:file')[0].files[0];
              PbxApi.FilesUploadFile(data, updatePBX.cbResumableUploadFile);
              return true;
            }
          }).modal('show');
        }
      });
      updatePBX.$formObj.form('validate form');
    });
    var requestData = {
      PBXVER: globalPBXVersion,
      LANGUAGE: globalWebAdminLanguage
    };
    $.api({
      url: 'https://releases.mikopbx.com/releases/v1/mikopbx/checkNewFirmware',
      on: 'now',
      method: 'POST',
      data: requestData,
      successTest: function successTest(response) {
        // test whether a JSON response is valid
        return response !== undefined && Object.keys(response).length > 0 && response.result === 'SUCCESS';
      },
      onSuccess: function onSuccess(response) {
        var currentVerison = updatePBX.currentVersion.replace('-dev', '');
        response.firmware.forEach(function (obj) {
          var version = obj.version.replace('-dev', '');

          if (versionCompare(version, currentVerison) > 0) {
            updatePBX.addNewVersionInformation(obj);
          }
        });
        $('a.redo').on('click', function (e) {
          e.preventDefault();
          if (updatePBX.$submitButton.hasClass('loading') || updatePBX.upgradeInProgress) return;
          updatePBX.$restoreModalForm.modal({
            closable: false,
            onDeny: function onDeny() {
              return true;
            },
            onApprove: function onApprove() {
              var params = [];
              var $aLink = $(e.target).closest('a');
              params.updateLink = $aLink.attr('href');
              params.md5 = $aLink.attr('data-md5');
              params.version = $aLink.attr('data-version');
              params.size = $aLink.attr('data-size');
              $aLink.find('i').addClass('loading');
              updatePBX.upgradeInProgress = true;
              PbxApi.FilesDownloadNewFirmware(params, updatePBX.cbAfterStartDownloadFirmware);
              return true;
            }
          }).modal('show');
        });
      }
    });
  },

  /**
   * Upload file by chunks
   * @param action
   * @param params
   */
  cbResumableUploadFile: function cbResumableUploadFile(action, params) {
    switch (action) {
      case 'fileSuccess':
        updatePBX.checkStatusFileMerging(params.response);
        break;

      case 'uploadStart':
        updatePBX.$submitButton.addClass('loading');
        updatePBX.$progressBar.show();
        updatePBX.$progressBarLabel.text(globalTranslate.upd_UploadInProgress);
        break;

      case 'progress':
        updatePBX.$progressBar.progress({
          percent: parseInt(params.percent, 10)
        });
        break;

      case 'error':
        updatePBX.$progressBarLabel.text(globalTranslate.upd_UploadError);
        updatePBX.$submitButton.removeClass('loading');
        UserMessage.showMultiString(globalTranslate.upd_UploadError);
        break;

      default:
    }
  },

  /**
   * Wait for file ready to use
   *
   * @param response ответ функции /pbxcore/api/upload/status
   */
  checkStatusFileMerging: function checkStatusFileMerging(response) {
    if (response === undefined || PbxApi.tryParseJSON(response) === false) {
      UserMessage.showMultiString("".concat(globalTranslate.upd_UploadError));
      return;
    }

    var json = JSON.parse(response);

    if (json === undefined || json.data === undefined) {
      UserMessage.showMultiString("".concat(globalTranslate.upd_UploadError));
      return;
    }

    var fileID = json.data.upload_id;
    var filePath = json.data.filename;
    mergingCheckWorker.initialize(fileID, filePath);
  },

  /**
   * Callback after start PBX upgrading
   * @param response
   */
  cbAfterStartUpdate: function cbAfterStartUpdate(response) {
    if (response.length === 0 || response === false) {
      UserMessage.showMultiString(globalTranslate.upd_UpgradeError);
      updatePBX.$submitButton.removeClass('loading');
    }
  },

  /**
   * After start online upgrade we have to wait an answer,
   * and then start status check worker
   */
  cbAfterStartDownloadFirmware: function cbAfterStartDownloadFirmware(response) {
    if (response.filename !== undefined) {
      upgradeStatusLoopWorker.initialize(response.filename);
    } else {
      updatePBX.upgradeInProgress = false;
      $('i.loading.redo').removeClass('loading');
    }
  },

  /**
   * Add new block of update information on page
   */
  addNewVersionInformation: function addNewVersionInformation(obj) {
    $('#online-updates-block').show();
    var markdownText = decodeURIComponent(obj.description);
    markdownText = markdownText.replace(/<br>/g, '\r');
    markdownText = markdownText.replace(/<br >/g, '\r');
    markdownText = markdownText.replace(/\* \*/g, '*');
    markdownText = markdownText.replace(/\*\*/g, '*');
    var html = updatePBX.converter.makeHtml(markdownText);
    var dymanicRow = "\n\t\t\t<tr class=\"update-row\">\n\t\t\t<td class=\"center aligned\">".concat(obj.version, "</td>\n\t\t\t<td>").concat(html, "</td>\n\t\t\t<td class=\"right aligned collapsing\">\n    \t\t<div class=\"ui small basic icon buttons action-buttons\">\n    \t\t\t<a href=\"").concat(obj.href, "\" class=\"ui button redo popuped\" \n    \t\t\t\tdata-content = \"").concat(globalTranslate.bt_ToolTipUpgradeOnline, "\"\n\t\t\t\t\tdata-md5 =\"").concat(obj.md5, "\" data-size =\"").concat(obj.size, "\"\n\t\t\t\t\tdata-version = \"").concat(obj.version, "\" >\n\t\t\t\t\t<i class=\"icon redo blue\"></i>\n\t\t\t\t\t<span class=\"percent\"></span>\n\t\t\t\t</a>\n\t\t\t\t<a href=\"").concat(obj.href, "\" class=\"ui button download popuped\" \n\t\t\t\t\tdata-content = \"").concat(globalTranslate.bt_ToolTipDownload, "\"\n\t\t\t\t\tdata-md5 =\"").concat(obj.md5, "\" data-size =\"").concat(obj.size, "\">\n\t\t\t\t\t<i class=\"icon download blue\"></i>\n\t\t\t\t</a>\n    \t\t</div>   \n\t</tr>");
    $('#updates-table tbody').append(dymanicRow);
    $('a.popuped').popup();
  }
};
$(document).ready(function () {
  updatePBX.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9VcGRhdGUvdXBkYXRlLWluZGV4LmpzIl0sIm5hbWVzIjpbIm1lcmdpbmdDaGVja1dvcmtlciIsInRpbWVPdXQiLCJ0aW1lT3V0SGFuZGxlIiwiZXJyb3JDb3VudHMiLCIkcHJvZ3Jlc3NCYXJMYWJlbCIsIiQiLCJmaW5kIiwiZmlsZUlEIiwiZmlsZVBhdGgiLCJpbml0aWFsaXplIiwicmVzdGFydFdvcmtlciIsIndpbmRvdyIsImNsZWFyVGltZW91dCIsInRpbWVvdXRIYW5kbGUiLCJ3b3JrZXIiLCJQYnhBcGkiLCJGaWxlc0dldFN0YXR1c1VwbG9hZEZpbGUiLCJjYkFmdGVyUmVzcG9uc2UiLCJzZXRUaW1lb3V0IiwicmVzcG9uc2UiLCJ0ZXh0IiwiZ2xvYmFsVHJhbnNsYXRlIiwidXBkX1VwbG9hZEVycm9yIiwiVXNlck1lc3NhZ2UiLCJzaG93TXVsdGlTdHJpbmciLCJ1cGRhdGVQQlgiLCIkc3VibWl0QnV0dG9uIiwicmVtb3ZlQ2xhc3MiLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiZF9zdGF0dXMiLCJ1cGRfVXBncmFkZUluUHJvZ3Jlc3MiLCJTeXN0ZW1VcGdyYWRlIiwiY2JBZnRlclN0YXJ0VXBkYXRlIiwidXBkX1VwbG9hZEluUHJvZ3Jlc3MiLCJ1cGdyYWRlU3RhdHVzTG9vcFdvcmtlciIsIml0ZXJhdGlvbnMiLCJmaWxlbmFtZSIsIkZpbGVzRmlybXdhcmVEb3dubG9hZFN0YXR1cyIsImNiUmVmcmVzaFVwZ3JhZGVTdGF0dXMiLCJjbG9zZXN0IiwiZF9zdGF0dXNfcHJvZ3Jlc3MiLCJhZGRDbGFzcyIsInVwZF9Eb3dubG9hZFVwZ3JhZGVFcnJvciIsIiRmb3JtT2JqIiwiJHByb2dyZXNzQmFyIiwiY3VycmVudFZlcnNpb24iLCJnbG9iYWxQQlhWZXJzaW9uIiwiJHJlc3RvcmVNb2RhbEZvcm0iLCJ1cGdyYWRlSW5Qcm9ncmVzcyIsImNvbnZlcnRlciIsInNob3dkb3duIiwiQ29udmVydGVyIiwibW9kYWwiLCJvbiIsImUiLCJ0YXJnZXQiLCJwYXJlbnRzIiwiY2xpY2siLCJmaWxlcyIsIm5hbWUiLCJwYXJlbnQiLCJ2YWwiLCJwcmV2ZW50RGVmYXVsdCIsImhhc0NsYXNzIiwiZm9ybSIsImZpZWxkcyIsInZhbGlkYXRlUnVsZXMiLCJvblN1Y2Nlc3MiLCJjbG9zYWJsZSIsIm9uRGVueSIsIm9uQXBwcm92ZSIsImRhdGEiLCJGaWxlc1VwbG9hZEZpbGUiLCJjYlJlc3VtYWJsZVVwbG9hZEZpbGUiLCJyZXF1ZXN0RGF0YSIsIlBCWFZFUiIsIkxBTkdVQUdFIiwiZ2xvYmFsV2ViQWRtaW5MYW5ndWFnZSIsImFwaSIsInVybCIsIm1ldGhvZCIsInN1Y2Nlc3NUZXN0IiwicmVzdWx0IiwiY3VycmVudFZlcmlzb24iLCJyZXBsYWNlIiwiZmlybXdhcmUiLCJmb3JFYWNoIiwib2JqIiwidmVyc2lvbiIsInZlcnNpb25Db21wYXJlIiwiYWRkTmV3VmVyc2lvbkluZm9ybWF0aW9uIiwicGFyYW1zIiwiJGFMaW5rIiwidXBkYXRlTGluayIsImF0dHIiLCJtZDUiLCJzaXplIiwiRmlsZXNEb3dubG9hZE5ld0Zpcm13YXJlIiwiY2JBZnRlclN0YXJ0RG93bmxvYWRGaXJtd2FyZSIsImFjdGlvbiIsImNoZWNrU3RhdHVzRmlsZU1lcmdpbmciLCJzaG93IiwicHJvZ3Jlc3MiLCJwZXJjZW50IiwicGFyc2VJbnQiLCJ0cnlQYXJzZUpTT04iLCJqc29uIiwiSlNPTiIsInBhcnNlIiwidXBsb2FkX2lkIiwidXBkX1VwZ3JhZGVFcnJvciIsIm1hcmtkb3duVGV4dCIsImRlY29kZVVSSUNvbXBvbmVudCIsImRlc2NyaXB0aW9uIiwiaHRtbCIsIm1ha2VIdG1sIiwiZHltYW5pY1JvdyIsImhyZWYiLCJidF9Ub29sVGlwVXBncmFkZU9ubGluZSIsImJ0X1Rvb2xUaXBEb3dubG9hZCIsImFwcGVuZCIsInBvcHVwIiwiZG9jdW1lbnQiLCJyZWFkeSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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T1FuRyxlQUFlLENBQUNvRyx1QkFQeEIsdUNBUUEvQixHQUFHLENBQUNRLEdBUkosNkJBUXdCUixHQUFHLENBQUNTLElBUjVCLDRDQVNLVCxHQUFHLENBQUNDLE9BVFQsMElBYUhELEdBQUcsQ0FBQzhCLElBYkQsa0ZBY0tuRyxlQUFlLENBQUNxRyxrQkFkckIsdUNBZUFoQyxHQUFHLENBQUNRLEdBZkosNkJBZXdCUixHQUFHLENBQUNTLElBZjVCLGtHQUFoQjtBQW9CQTlGLElBQUFBLENBQUMsQ0FBQyxzQkFBRCxDQUFELENBQTBCc0gsTUFBMUIsQ0FBaUNKLFVBQWpDO0FBQ0FsSCxJQUFBQSxDQUFDLENBQUMsV0FBRCxDQUFELENBQWV1SCxLQUFmO0FBQ0E7QUEzTWdCLENBQWxCO0FBK01BdkgsQ0FBQyxDQUFDd0gsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBTTtBQUN2QnJHLEVBQUFBLFNBQVMsQ0FBQ2hCLFVBQVY7QUFDQSxDQUZEIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIE1pa29QQlggLSBmcmVlIHBob25lIHN5c3RlbSBmb3Igc21hbGwgYnVzaW5lc3NcbiAqIENvcHlyaWdodCAoQykgMjAxNy0yMDIwIEFsZXhleSBQb3J0bm92IGFuZCBOaWtvbGF5IEJla2V0b3ZcbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uXG4gKiBJZiBub3QsIHNlZSA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG5cbi8qIGdsb2JhbCBQYnhBcGksIGdsb2JhbFBCWFZlcnNpb24sIGdsb2JhbFRyYW5zbGF0ZSxcbmdsb2JhbFdlYkFkbWluTGFuZ3VhZ2UsIGdsb2JhbFBCWFZlcnNpb24sIHNob3dkb3duLCBVc2VyTWVzc2FnZSAqL1xuXG5jb25zdCBtZXJnaW5nQ2hlY2tXb3JrZXIgPSB7XG5cdHRpbWVPdXQ6IDMwMDAsXG5cdHRpbWVPdXRIYW5kbGU6ICcnLFxuXHRlcnJvckNvdW50czogMCxcblx0JHByb2dyZXNzQmFyTGFiZWw6ICQoJyN1cGxvYWQtcHJvZ3Jlc3MtYmFyJykuZmluZCgnLmxhYmVsJyksXG5cdGZpbGVJRDogbnVsbCxcblx0ZmlsZVBhdGg6ICcnLFxuXHRpbml0aWFsaXplKGZpbGVJRCwgZmlsZVBhdGgpIHtcblx0XHRtZXJnaW5nQ2hlY2tXb3JrZXIuZmlsZUlEID0gZmlsZUlEO1xuXHRcdG1lcmdpbmdDaGVja1dvcmtlci5maWxlUGF0aCA9IGZpbGVQYXRoO1xuXHRcdG1lcmdpbmdDaGVja1dvcmtlci5yZXN0YXJ0V29ya2VyKGZpbGVJRCk7XG5cdH0sXG5cdHJlc3RhcnRXb3JrZXIoKSB7XG5cdFx0d2luZG93LmNsZWFyVGltZW91dChtZXJnaW5nQ2hlY2tXb3JrZXIudGltZW91dEhhbmRsZSk7XG5cdFx0bWVyZ2luZ0NoZWNrV29ya2VyLndvcmtlcigpO1xuXHR9LFxuXHR3b3JrZXIoKSB7XG5cdFx0UGJ4QXBpLkZpbGVzR2V0U3RhdHVzVXBsb2FkRmlsZShtZXJnaW5nQ2hlY2tXb3JrZXIuZmlsZUlELCBtZXJnaW5nQ2hlY2tXb3JrZXIuY2JBZnRlclJlc3BvbnNlKTtcblx0XHRtZXJnaW5nQ2hlY2tXb3JrZXIudGltZW91dEhhbmRsZSA9IHdpbmRvdy5zZXRUaW1lb3V0KFxuXHRcdFx0bWVyZ2luZ0NoZWNrV29ya2VyLndvcmtlcixcblx0XHRcdG1lcmdpbmdDaGVja1dvcmtlci50aW1lT3V0LFxuXHRcdCk7XG5cdH0sXG5cdGNiQWZ0ZXJSZXNwb25zZShyZXNwb25zZSkge1xuXHRcdGlmIChtZXJnaW5nQ2hlY2tXb3JrZXIuZXJyb3JDb3VudHMgPiAxMCkge1xuXHRcdFx0bWVyZ2luZ0NoZWNrV29ya2VyLiRwcm9ncmVzc0JhckxhYmVsLnRleHQoZ2xvYmFsVHJhbnNsYXRlLnVwZF9VcGxvYWRFcnJvcik7XG5cdFx0XHRVc2VyTWVzc2FnZS5zaG93TXVsdGlTdHJpbmcoZ2xvYmFsVHJhbnNsYXRlLnVwZF9VcGxvYWRFcnJvcik7XG5cdFx0XHR1cGRhdGVQQlguJHN1Ym1pdEJ1dHRvbi5yZW1vdmVDbGFzcygnbG9hZGluZycpO1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dChtZXJnaW5nQ2hlY2tXb3JrZXIudGltZW91dEhhbmRsZSk7XG5cdFx0fVxuXHRcdGlmIChyZXNwb25zZSA9PT0gdW5kZWZpbmVkIHx8IE9iamVjdC5rZXlzKHJlc3BvbnNlKS5sZW5ndGggPT09IDApIHtcblx0XHRcdG1lcmdpbmdDaGVja1dvcmtlci5lcnJvckNvdW50cyArPSAxO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAocmVzcG9uc2UuZF9zdGF0dXMgPT09ICdVUExPQURfQ09NUExFVEUnKSB7XG5cdFx0XHRtZXJnaW5nQ2hlY2tXb3JrZXIuJHByb2dyZXNzQmFyTGFiZWwudGV4dChnbG9iYWxUcmFuc2xhdGUudXBkX1VwZ3JhZGVJblByb2dyZXNzKTtcblx0XHRcdFBieEFwaS5TeXN0ZW1VcGdyYWRlKG1lcmdpbmdDaGVja1dvcmtlci5maWxlUGF0aCwgdXBkYXRlUEJYLmNiQWZ0ZXJTdGFydFVwZGF0ZSk7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KG1lcmdpbmdDaGVja1dvcmtlci50aW1lb3V0SGFuZGxlKTtcblx0XHR9IGVsc2UgaWYgKHJlc3BvbnNlLmRfc3RhdHVzICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdG1lcmdpbmdDaGVja1dvcmtlci4kcHJvZ3Jlc3NCYXJMYWJlbC50ZXh0KGdsb2JhbFRyYW5zbGF0ZS51cGRfVXBsb2FkSW5Qcm9ncmVzcyk7XG5cdFx0XHRtZXJnaW5nQ2hlY2tXb3JrZXIuZXJyb3JDb3VudHMgPSAwO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZXJnaW5nQ2hlY2tXb3JrZXIuZXJyb3JDb3VudHMgKz0gMTtcblx0XHR9XG5cdH0sXG59O1xuXG5cbmNvbnN0IHVwZ3JhZGVTdGF0dXNMb29wV29ya2VyID0ge1xuXHR0aW1lT3V0OiAxMDAwLFxuXHR0aW1lT3V0SGFuZGxlOiAnJyxcblx0aXRlcmF0aW9uczogMCxcblx0ZmlsZW5hbWU6ICcnLFxuXHRpbml0aWFsaXplKGZpbGVuYW1lKSB7XG5cdFx0dXBncmFkZVN0YXR1c0xvb3BXb3JrZXIuZmlsZW5hbWUgPSBmaWxlbmFtZTtcblx0XHR1cGdyYWRlU3RhdHVzTG9vcFdvcmtlci5pdGVyYXRpb25zID0gMDtcblx0XHR1cGdyYWRlU3RhdHVzTG9vcFdvcmtlci5yZXN0YXJ0V29ya2VyKCk7XG5cdH0sXG5cdHJlc3RhcnRXb3JrZXIoKSB7XG5cdFx0d2luZG93LmNsZWFyVGltZW91dCh1cGdyYWRlU3RhdHVzTG9vcFdvcmtlci50aW1lb3V0SGFuZGxlKTtcblx0XHR1cGdyYWRlU3RhdHVzTG9vcFdvcmtlci53b3JrZXIoKTtcblx0fSxcblx0d29ya2VyKCkge1xuXHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodXBncmFkZVN0YXR1c0xvb3BXb3JrZXIudGltZW91dEhhbmRsZSk7XG5cdFx0UGJ4QXBpLkZpbGVzRmlybXdhcmVEb3dubG9hZFN0YXR1cyh1cGdyYWRlU3RhdHVzTG9vcFdvcmtlci5maWxlbmFtZSwgdXBncmFkZVN0YXR1c0xvb3BXb3JrZXIuY2JSZWZyZXNoVXBncmFkZVN0YXR1cyk7XG5cdH0sXG5cdGNiUmVmcmVzaFVwZ3JhZGVTdGF0dXMocmVzcG9uc2UpIHtcblx0XHR1cGdyYWRlU3RhdHVzTG9vcFdvcmtlci5pdGVyYXRpb25zICs9IDE7XG5cdFx0dXBncmFkZVN0YXR1c0xvb3BXb3JrZXIudGltZW91dEhhbmRsZSA9XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCh1cGdyYWRlU3RhdHVzTG9vcFdvcmtlci53b3JrZXIsIHVwZ3JhZGVTdGF0dXNMb29wV29ya2VyLnRpbWVPdXQpO1xuXHRcdGlmIChyZXNwb25zZS5sZW5ndGggPT09IDAgfHwgcmVzcG9uc2UgPT09IGZhbHNlKSByZXR1cm47XG5cdFx0aWYgKHJlc3BvbnNlLmRfc3RhdHVzID09PSAnRE9XTkxPQURfSU5fUFJPR1JFU1MnKSB7XG5cdFx0XHQkKCdpLmxvYWRpbmcucmVkbycpLmNsb3Nlc3QoJ2EnKS5maW5kKCcucGVyY2VudCcpLnRleHQoYCR7cmVzcG9uc2UuZF9zdGF0dXNfcHJvZ3Jlc3N9JWApO1xuXHRcdH0gZWxzZSBpZiAocmVzcG9uc2UuZF9zdGF0dXMgPT09ICdET1dOTE9BRF9DT01QTEVURScpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodXBncmFkZVN0YXR1c0xvb3BXb3JrZXIudGltZW91dEhhbmRsZSk7XG5cdFx0XHQkKCdpLmxvYWRpbmcucmVkbycpLmNsb3Nlc3QoJ2EnKS5maW5kKCcucGVyY2VudCcpLnRleHQoYCR7cmVzcG9uc2UuZF9zdGF0dXNfcHJvZ3Jlc3N9JWApO1xuXHRcdFx0JCgnaS5sb2FkaW5nLnJlZG8nKS5hZGRDbGFzcygnc3luYycpLnJlbW92ZUNsYXNzKCdyZWRvJyk7XG5cdFx0XHRQYnhBcGkuU3lzdGVtVXBncmFkZShyZXNwb25zZS5maWxlUGF0aCwgdXBkYXRlUEJYLmNiQWZ0ZXJTdGFydFVwZGF0ZSk7XG5cdFx0fSBlbHNlIGlmIChyZXNwb25zZS5kX3N0YXR1cyA9PT0gJ0RPV05MT0FEX0VSUk9SJykge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCh1cGdyYWRlU3RhdHVzTG9vcFdvcmtlci50aW1lb3V0SGFuZGxlKTtcblx0XHRcdFVzZXJNZXNzYWdlLnNob3dNdWx0aVN0cmluZyhnbG9iYWxUcmFuc2xhdGUudXBkX0Rvd25sb2FkVXBncmFkZUVycm9yKTtcblx0XHRcdCQoJ2kubG9hZGluZy5yZWRvJykuYWRkQ2xhc3MoJ3JlZG8nKS5yZW1vdmVDbGFzcygnbG9hZGluZycpO1xuXHRcdH1cblx0fSxcbn07XG5cblxuY29uc3QgdXBkYXRlUEJYID0ge1xuXHQkZm9ybU9iajogJCgnI3VwZ3JhZGUtZm9ybScpLFxuXHQkc3VibWl0QnV0dG9uOiAkKCcjc3VibWl0YnV0dG9uJyksXG5cdCRwcm9ncmVzc0JhcjogJCgnI3VwbG9hZC1wcm9ncmVzcy1iYXInKSxcblx0JHByb2dyZXNzQmFyTGFiZWw6ICQoJyN1cGxvYWQtcHJvZ3Jlc3MtYmFyJykuZmluZCgnLmxhYmVsJyksXG5cdGN1cnJlbnRWZXJzaW9uOiBnbG9iYWxQQlhWZXJzaW9uLFxuXHQkcmVzdG9yZU1vZGFsRm9ybTogJCgnI3VwZGF0ZS1tb2RhbC1mb3JtJyksXG5cdHVwZ3JhZGVJblByb2dyZXNzOiBmYWxzZSxcblx0Y29udmVydGVyOiBuZXcgc2hvd2Rvd24uQ29udmVydGVyKCksXG5cdGluaXRpYWxpemUoKSB7XG5cdFx0dXBkYXRlUEJYLiRyZXN0b3JlTW9kYWxGb3JtLm1vZGFsKCk7XG5cdFx0dXBkYXRlUEJYLiRzdWJtaXRCdXR0b24uYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cdFx0JCgnaW5wdXQ6dGV4dCwgLnVpLmJ1dHRvbicsICcudWkuYWN0aW9uLmlucHV0Jykub24oJ2NsaWNrJywgKGUpID0+IHtcblx0XHRcdCQoJ2lucHV0OmZpbGUnLCAkKGUudGFyZ2V0KS5wYXJlbnRzKCkpLmNsaWNrKCk7XG5cdFx0fSk7XG5cblx0XHQkKCdpbnB1dDpmaWxlJywgJy51aS5hY3Rpb24uaW5wdXQnKS5vbignY2hhbmdlJywgKGUpID0+IHtcblx0XHRcdGlmIChlLnRhcmdldC5maWxlc1swXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGNvbnN0IGZpbGVuYW1lID0gZS50YXJnZXQuZmlsZXNbMF0ubmFtZTtcblx0XHRcdFx0JCgnaW5wdXQ6dGV4dCcsICQoZS50YXJnZXQpLnBhcmVudCgpKS52YWwoZmlsZW5hbWUpO1xuXHRcdFx0XHR1cGRhdGVQQlguJHN1Ym1pdEJ1dHRvbi5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHR1cGRhdGVQQlguJHN1Ym1pdEJ1dHRvbi5vbignY2xpY2snLCAoZSkgPT4ge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0aWYgKHVwZGF0ZVBCWC4kc3VibWl0QnV0dG9uLmhhc0NsYXNzKCdsb2FkaW5nJykgfHwgdXBkYXRlUEJYLnVwZ3JhZGVJblByb2dyZXNzKSByZXR1cm47XG5cblx0XHRcdHVwZGF0ZVBCWC4kZm9ybU9ialxuXHRcdFx0XHQuZm9ybSh7XG5cdFx0XHRcdFx0b246ICdibHVyJyxcblx0XHRcdFx0XHRmaWVsZHM6IHVwZGF0ZVBCWC52YWxpZGF0ZVJ1bGVzLFxuXHRcdFx0XHRcdG9uU3VjY2VzcygpIHtcblx0XHRcdFx0XHRcdHVwZGF0ZVBCWC4kcmVzdG9yZU1vZGFsRm9ybVxuXHRcdFx0XHRcdFx0XHQubW9kYWwoe1xuXHRcdFx0XHRcdFx0XHRcdGNsb3NhYmxlOiBmYWxzZSxcblx0XHRcdFx0XHRcdFx0XHRvbkRlbnk6ICgpID0+IHRydWUsXG5cdFx0XHRcdFx0XHRcdFx0b25BcHByb3ZlOiAoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1cGRhdGVQQlguJHN1Ym1pdEJ1dHRvbi5hZGRDbGFzcygnbG9hZGluZycpO1xuXHRcdFx0XHRcdFx0XHRcdFx0dXBkYXRlUEJYLnVwZ3JhZGVJblByb2dyZXNzID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGRhdGEgPSAkKCdpbnB1dDpmaWxlJylbMF0uZmlsZXNbMF07XG5cdFx0XHRcdFx0XHRcdFx0XHRQYnhBcGkuRmlsZXNVcGxvYWRGaWxlKGRhdGEsdXBkYXRlUEJYLmNiUmVzdW1hYmxlVXBsb2FkRmlsZSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0XHQubW9kYWwoJ3Nob3cnKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9KTtcblx0XHRcdHVwZGF0ZVBCWC4kZm9ybU9iai5mb3JtKCd2YWxpZGF0ZSBmb3JtJyk7XG5cdFx0fSk7XG5cdFx0Y29uc3QgcmVxdWVzdERhdGEgPSB7XG5cdFx0XHRQQlhWRVI6IGdsb2JhbFBCWFZlcnNpb24sXG5cdFx0XHRMQU5HVUFHRTogZ2xvYmFsV2ViQWRtaW5MYW5ndWFnZSxcblx0XHR9O1xuXHRcdCQuYXBpKHtcblx0XHRcdHVybDogJ2h0dHBzOi8vcmVsZWFzZXMubWlrb3BieC5jb20vcmVsZWFzZXMvdjEvbWlrb3BieC9jaGVja05ld0Zpcm13YXJlJyxcblx0XHRcdG9uOiAnbm93Jyxcblx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0ZGF0YTogcmVxdWVzdERhdGEsXG5cdFx0XHRzdWNjZXNzVGVzdChyZXNwb25zZSkge1xuXHRcdFx0XHQvLyB0ZXN0IHdoZXRoZXIgYSBKU09OIHJlc3BvbnNlIGlzIHZhbGlkXG5cdFx0XHRcdHJldHVybiByZXNwb25zZSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdFx0JiYgT2JqZWN0LmtleXMocmVzcG9uc2UpLmxlbmd0aCA+IDBcblx0XHRcdFx0XHQmJiByZXNwb25zZS5yZXN1bHQgPT09ICdTVUNDRVNTJztcblx0XHRcdH0sXG5cdFx0XHRvblN1Y2Nlc3MocmVzcG9uc2UpIHtcblx0XHRcdFx0Y29uc3QgY3VycmVudFZlcmlzb24gPSB1cGRhdGVQQlguY3VycmVudFZlcnNpb24ucmVwbGFjZSgnLWRldicsICcnKTtcblx0XHRcdFx0cmVzcG9uc2UuZmlybXdhcmUuZm9yRWFjaCgob2JqKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgdmVyc2lvbiA9IG9iai52ZXJzaW9uLnJlcGxhY2UoJy1kZXYnLCAnJyk7XG5cdFx0XHRcdFx0aWYgKHZlcnNpb25Db21wYXJlKHZlcnNpb24sIGN1cnJlbnRWZXJpc29uKSA+IDApIHtcblx0XHRcdFx0XHRcdHVwZGF0ZVBCWC5hZGROZXdWZXJzaW9uSW5mb3JtYXRpb24ob2JqKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdCQoJ2EucmVkbycpLm9uKCdjbGljaycsIChlKSA9PiB7XG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdGlmICh1cGRhdGVQQlguJHN1Ym1pdEJ1dHRvbi5oYXNDbGFzcygnbG9hZGluZycpIHx8IHVwZGF0ZVBCWC51cGdyYWRlSW5Qcm9ncmVzcykgcmV0dXJuO1xuXHRcdFx0XHRcdHVwZGF0ZVBCWC4kcmVzdG9yZU1vZGFsRm9ybVxuXHRcdFx0XHRcdFx0Lm1vZGFsKHtcblx0XHRcdFx0XHRcdFx0Y2xvc2FibGU6IGZhbHNlLFxuXHRcdFx0XHRcdFx0XHRvbkRlbnk6ICgpID0+IHRydWUsXG5cdFx0XHRcdFx0XHRcdG9uQXBwcm92ZTogKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IHBhcmFtcyA9IFtdO1xuXHRcdFx0XHRcdFx0XHRcdGNvbnN0ICRhTGluayA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJ2EnKTtcblx0XHRcdFx0XHRcdFx0XHRwYXJhbXMudXBkYXRlTGluayA9ICRhTGluay5hdHRyKCdocmVmJyk7XG5cdFx0XHRcdFx0XHRcdFx0cGFyYW1zLm1kNSA9ICRhTGluay5hdHRyKCdkYXRhLW1kNScpO1xuXHRcdFx0XHRcdFx0XHRcdHBhcmFtcy52ZXJzaW9uID0gJGFMaW5rLmF0dHIoJ2RhdGEtdmVyc2lvbicpO1xuXHRcdFx0XHRcdFx0XHRcdHBhcmFtcy5zaXplID0gJGFMaW5rLmF0dHIoJ2RhdGEtc2l6ZScpO1xuXHRcdFx0XHRcdFx0XHRcdCRhTGluay5maW5kKCdpJykuYWRkQ2xhc3MoJ2xvYWRpbmcnKTtcblx0XHRcdFx0XHRcdFx0XHR1cGRhdGVQQlgudXBncmFkZUluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdFBieEFwaS5GaWxlc0Rvd25sb2FkTmV3RmlybXdhcmUocGFyYW1zLCB1cGRhdGVQQlguY2JBZnRlclN0YXJ0RG93bmxvYWRGaXJtd2FyZSk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0Lm1vZGFsKCdzaG93Jyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSxcblx0XHR9KTtcblx0fSxcblx0LyoqXG5cdCAqIFVwbG9hZCBmaWxlIGJ5IGNodW5rc1xuXHQgKiBAcGFyYW0gYWN0aW9uXG5cdCAqIEBwYXJhbSBwYXJhbXNcblx0ICovXG5cdGNiUmVzdW1hYmxlVXBsb2FkRmlsZShhY3Rpb24sIHBhcmFtcyl7XG5cdFx0c3dpdGNoIChhY3Rpb24pIHtcblx0XHRcdGNhc2UgJ2ZpbGVTdWNjZXNzJzpcblx0XHRcdFx0dXBkYXRlUEJYLmNoZWNrU3RhdHVzRmlsZU1lcmdpbmcocGFyYW1zLnJlc3BvbnNlKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICd1cGxvYWRTdGFydCc6XG5cdFx0XHRcdHVwZGF0ZVBCWC4kc3VibWl0QnV0dG9uLmFkZENsYXNzKCdsb2FkaW5nJyk7XG5cdFx0XHRcdHVwZGF0ZVBCWC4kcHJvZ3Jlc3NCYXIuc2hvdygpO1xuXHRcdFx0XHR1cGRhdGVQQlguJHByb2dyZXNzQmFyTGFiZWwudGV4dChnbG9iYWxUcmFuc2xhdGUudXBkX1VwbG9hZEluUHJvZ3Jlc3MpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ3Byb2dyZXNzJzpcblx0XHRcdFx0dXBkYXRlUEJYLiRwcm9ncmVzc0Jhci5wcm9ncmVzcyh7XG5cdFx0XHRcdFx0cGVyY2VudDogcGFyc2VJbnQocGFyYW1zLnBlcmNlbnQsIDEwKSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnZXJyb3InOlxuXHRcdFx0XHR1cGRhdGVQQlguJHByb2dyZXNzQmFyTGFiZWwudGV4dChnbG9iYWxUcmFuc2xhdGUudXBkX1VwbG9hZEVycm9yKTtcblx0XHRcdFx0dXBkYXRlUEJYLiRzdWJtaXRCdXR0b24ucmVtb3ZlQ2xhc3MoJ2xvYWRpbmcnKTtcblx0XHRcdFx0VXNlck1lc3NhZ2Uuc2hvd011bHRpU3RyaW5nKGdsb2JhbFRyYW5zbGF0ZS51cGRfVXBsb2FkRXJyb3IpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cblxuXHRcdH1cblx0fSxcblx0LyoqXG5cdCAqIFdhaXQgZm9yIGZpbGUgcmVhZHkgdG8gdXNlXG5cdCAqXG5cdCAqIEBwYXJhbSByZXNwb25zZSDQvtGC0LLQtdGCINGE0YPQvdC60YbQuNC4IC9wYnhjb3JlL2FwaS91cGxvYWQvc3RhdHVzXG5cdCAqL1xuXHRjaGVja1N0YXR1c0ZpbGVNZXJnaW5nKHJlc3BvbnNlKSB7XG5cdFx0aWYgKHJlc3BvbnNlID09PSB1bmRlZmluZWQgfHwgUGJ4QXBpLnRyeVBhcnNlSlNPTihyZXNwb25zZSkgPT09IGZhbHNlKSB7XG5cdFx0XHRVc2VyTWVzc2FnZS5zaG93TXVsdGlTdHJpbmcoYCR7Z2xvYmFsVHJhbnNsYXRlLnVwZF9VcGxvYWRFcnJvcn1gKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QganNvbiA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuXHRcdGlmIChqc29uID09PSB1bmRlZmluZWQgfHwganNvbi5kYXRhID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFVzZXJNZXNzYWdlLnNob3dNdWx0aVN0cmluZyhgJHtnbG9iYWxUcmFuc2xhdGUudXBkX1VwbG9hZEVycm9yfWApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCBmaWxlSUQgPSBqc29uLmRhdGEudXBsb2FkX2lkO1xuXHRcdGNvbnN0IGZpbGVQYXRoID0ganNvbi5kYXRhLmZpbGVuYW1lO1xuXHRcdG1lcmdpbmdDaGVja1dvcmtlci5pbml0aWFsaXplKGZpbGVJRCwgZmlsZVBhdGgpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBDYWxsYmFjayBhZnRlciBzdGFydCBQQlggdXBncmFkaW5nXG5cdCAqIEBwYXJhbSByZXNwb25zZVxuXHQgKi9cblx0Y2JBZnRlclN0YXJ0VXBkYXRlKHJlc3BvbnNlKSB7XG5cdFx0aWYgKHJlc3BvbnNlLmxlbmd0aCA9PT0gMCB8fCByZXNwb25zZSA9PT0gZmFsc2UpIHtcblx0XHRcdFVzZXJNZXNzYWdlLnNob3dNdWx0aVN0cmluZyhnbG9iYWxUcmFuc2xhdGUudXBkX1VwZ3JhZGVFcnJvcik7XG5cdFx0XHR1cGRhdGVQQlguJHN1Ym1pdEJ1dHRvbi5yZW1vdmVDbGFzcygnbG9hZGluZycpO1xuXHRcdH1cblx0fSxcblx0LyoqXG5cdCAqIEFmdGVyIHN0YXJ0IG9ubGluZSB1cGdyYWRlIHdlIGhhdmUgdG8gd2FpdCBhbiBhbnN3ZXIsXG5cdCAqIGFuZCB0aGVuIHN0YXJ0IHN0YXR1cyBjaGVjayB3b3JrZXJcblx0ICovXG5cdGNiQWZ0ZXJTdGFydERvd25sb2FkRmlybXdhcmUocmVzcG9uc2UpIHtcblx0XHRpZiAocmVzcG9uc2UuZmlsZW5hbWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dXBncmFkZVN0YXR1c0xvb3BXb3JrZXIuaW5pdGlhbGl6ZShyZXNwb25zZS5maWxlbmFtZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHVwZGF0ZVBCWC51cGdyYWRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuXHRcdFx0JCgnaS5sb2FkaW5nLnJlZG8nKS5yZW1vdmVDbGFzcygnbG9hZGluZycpO1xuXHRcdH1cblx0fSxcblx0LyoqXG5cdCAqIEFkZCBuZXcgYmxvY2sgb2YgdXBkYXRlIGluZm9ybWF0aW9uIG9uIHBhZ2Vcblx0ICovXG5cdGFkZE5ld1ZlcnNpb25JbmZvcm1hdGlvbihvYmopIHtcblx0XHQkKCcjb25saW5lLXVwZGF0ZXMtYmxvY2snKS5zaG93KCk7XG5cdFx0bGV0IG1hcmtkb3duVGV4dCA9IGRlY29kZVVSSUNvbXBvbmVudChvYmouZGVzY3JpcHRpb24pO1xuXHRcdG1hcmtkb3duVGV4dCA9IG1hcmtkb3duVGV4dC5yZXBsYWNlKC88YnI+L2csICdcXHInKTtcblx0XHRtYXJrZG93blRleHQgPSBtYXJrZG93blRleHQucmVwbGFjZSgvPGJyID4vZywgJ1xccicpO1xuXHRcdG1hcmtkb3duVGV4dCA9IG1hcmtkb3duVGV4dC5yZXBsYWNlKC9cXCogXFwqL2csICcqJyk7XG5cdFx0bWFya2Rvd25UZXh0ID0gbWFya2Rvd25UZXh0LnJlcGxhY2UoL1xcKlxcKi9nLCAnKicpO1xuXHRcdGNvbnN0IGh0bWwgPSB1cGRhdGVQQlguY29udmVydGVyLm1ha2VIdG1sKG1hcmtkb3duVGV4dCk7XG5cdFx0Y29uc3QgZHltYW5pY1JvdyA9IGBcblx0XHRcdDx0ciBjbGFzcz1cInVwZGF0ZS1yb3dcIj5cblx0XHRcdDx0ZCBjbGFzcz1cImNlbnRlciBhbGlnbmVkXCI+JHtvYmoudmVyc2lvbn08L3RkPlxuXHRcdFx0PHRkPiR7aHRtbH08L3RkPlxuXHRcdFx0PHRkIGNsYXNzPVwicmlnaHQgYWxpZ25lZCBjb2xsYXBzaW5nXCI+XG4gICAgXHRcdDxkaXYgY2xhc3M9XCJ1aSBzbWFsbCBiYXNpYyBpY29uIGJ1dHRvbnMgYWN0aW9uLWJ1dHRvbnNcIj5cbiAgICBcdFx0XHQ8YSBocmVmPVwiJHtvYmouaHJlZn1cIiBjbGFzcz1cInVpIGJ1dHRvbiByZWRvIHBvcHVwZWRcIiBcbiAgICBcdFx0XHRcdGRhdGEtY29udGVudCA9IFwiJHtnbG9iYWxUcmFuc2xhdGUuYnRfVG9vbFRpcFVwZ3JhZGVPbmxpbmV9XCJcblx0XHRcdFx0XHRkYXRhLW1kNSA9XCIke29iai5tZDV9XCIgZGF0YS1zaXplID1cIiR7b2JqLnNpemV9XCJcblx0XHRcdFx0XHRkYXRhLXZlcnNpb24gPSBcIiR7b2JqLnZlcnNpb259XCIgPlxuXHRcdFx0XHRcdDxpIGNsYXNzPVwiaWNvbiByZWRvIGJsdWVcIj48L2k+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJwZXJjZW50XCI+PC9zcGFuPlxuXHRcdFx0XHQ8L2E+XG5cdFx0XHRcdDxhIGhyZWY9XCIke29iai5ocmVmfVwiIGNsYXNzPVwidWkgYnV0dG9uIGRvd25sb2FkIHBvcHVwZWRcIiBcblx0XHRcdFx0XHRkYXRhLWNvbnRlbnQgPSBcIiR7Z2xvYmFsVHJhbnNsYXRlLmJ0X1Rvb2xUaXBEb3dubG9hZH1cIlxuXHRcdFx0XHRcdGRhdGEtbWQ1ID1cIiR7b2JqLm1kNX1cIiBkYXRhLXNpemUgPVwiJHtvYmouc2l6ZX1cIj5cblx0XHRcdFx0XHQ8aSBjbGFzcz1cImljb24gZG93bmxvYWQgYmx1ZVwiPjwvaT5cblx0XHRcdFx0PC9hPlxuICAgIFx0XHQ8L2Rpdj4gICBcblx0PC90cj5gO1xuXHRcdCQoJyN1cGRhdGVzLXRhYmxlIHRib2R5JykuYXBwZW5kKGR5bWFuaWNSb3cpO1xuXHRcdCQoJ2EucG9wdXBlZCcpLnBvcHVwKCk7XG5cdH0sXG59O1xuXG5cbiQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcblx0dXBkYXRlUEJYLmluaXRpYWxpemUoKTtcbn0pO1xuXG4iXX0=